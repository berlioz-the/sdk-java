package com.berlioz.sql;

import com.berlioz.PeerAccessor;
import com.berlioz.Zipkin;
import com.berlioz.msg.BaseEndpoint;

import java.sql.*;

public class SqlStatement implements Statement {

    PeerAccessor _peerAccessor;
    Statement _inner;

    SqlStatement(PeerAccessor peerAccessor, Statement inner)
    {
        this._peerAccessor = peerAccessor;
        this._inner = inner;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        return run("executeQuery", new InnerAction<ResultSet>() {
            public ResultSet perform(Statement statement) throws SQLException {
                return statement.executeQuery(sql);
            }
        });
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return run("executeUpdate", new InnerAction<Integer>() {
            public Integer perform(Statement statement) throws SQLException {
                return statement.executeUpdate(sql);
            }
        }).intValue();
    }

    @Override
    public void close() throws SQLException {
        this._inner.close();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return this._inner.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        this._inner.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return this._inner.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        this._inner.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        this._inner.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return this._inner.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        this._inner.setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws SQLException {
        this._inner.cancel();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return this._inner.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        this._inner.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        this._inner.setCursorName(name);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        return run("execute", new InnerAction<Boolean>() {
            public Boolean perform(Statement statement) throws SQLException {
                return statement.execute(sql);
            }
        }).booleanValue();
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return this._inner.getResultSet();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return this._inner.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return this._inner.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        this._inner.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return this._inner.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        this._inner.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return this._inner.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return this._inner.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return this._inner.getResultSetType();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        this._inner.addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        this._inner.clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return this._inner.executeBatch();
    }

    @Override
    public Connection getConnection() throws SQLException {
        return this._inner.getConnection();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return this._inner.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return this._inner.getGeneratedKeys();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return run("executeUpdate", new InnerAction<Integer>() {
            public Integer perform(Statement statement) throws SQLException {
                return statement.executeUpdate(sql, autoGeneratedKeys);
            }
        }).intValue();
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return run("executeUpdate", new InnerAction<Integer>() {
            public Integer perform(Statement statement) throws SQLException {
                return statement.executeUpdate(sql, columnIndexes);
            }
        }).intValue();
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return run("executeUpdate", new InnerAction<Integer>() {
            public Integer perform(Statement statement) throws SQLException {
                return statement.executeUpdate(sql, columnNames);
            }
        }).intValue();
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return run("execute", new InnerAction<Boolean>() {
            public Boolean perform(Statement statement) throws SQLException {
                return statement.execute(sql, autoGeneratedKeys);
            }
        }).booleanValue();
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return run("execute", new InnerAction<Boolean>() {
            public Boolean perform(Statement statement) throws SQLException {
                return statement.execute(sql, columnIndexes);
            }
        }).booleanValue();
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return run("execute", new InnerAction<Boolean>() {
            public Boolean perform(Statement statement) throws SQLException {
                return statement.execute(sql, columnNames);
            }
        }).booleanValue();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return this._inner.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return this._inner.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        this._inner.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return this._inner.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        this._inner.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return this._inner.isCloseOnCompletion();
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return this._inner.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return this._inner.isWrapperFor(iface);
    }

    private <T> T run(String actionName, InnerAction<T> action) throws SQLException {
        com.berlioz.Executor<T, SQLException> executor = new com.berlioz.Executor<T, SQLException>();
        executor.zipkin(_peerAccessor.getRemoteName(), actionName);
        executor.action(new com.berlioz.Executor.IAction<T, SQLException>() {
            public T perform(BaseEndpoint basePeer, Zipkin.Span span) throws SQLException {
                return action.perform(_inner);
            }});
        return executor.run();
    }

    private interface InnerAction<T> {
        T perform(Statement statement) throws SQLException;
    }
}
